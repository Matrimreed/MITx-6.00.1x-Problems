Problem 4 - The Game
15.0/15.0 points (graded)
Now you will implement the function hangman, which takes one parameter - the secretWord the user is to guess. This starts up an interactive game of Hangman between the user and the computer. Be sure you take advantage of the three helper functions, isWordGuessed, getGuessedWord, and getAvailableLetters, that you've defined in the previous part.

Hints:
You should start by noticing where we're using the provided functions (at the top of ps3_hangman.py) to load the words and pick a random one. Note that the functions loadWords and chooseWord should only be used on your local machine, not in the tutor. When you enter in your solution in the tutor, you only need to give your hangman function.

Consider using lower() to convert user input to lower case. For example:

guess = 'A'
guessInLowerCase = guess.lower()
Consider writing additional helper functions if you need them!

There are four important pieces of information you may wish to store:

secretWord: The word to guess.
lettersGuessed: The letters that have been guessed so far.
mistakesMade: The number of incorrect guesses made so far.
availableLetters: The letters that may still be guessed. Every time a player guesses a letter, the guessed letter must be removed from availableLetters (and if they guess a letter that is not in availableLetters, you should print a message telling them they've already guessed that - so try again!).

# Hangman game
#

# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)

import random

WORDLIST_FILENAME = "words.txt"



def isWordGuessed(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in lettersGuessed;
      False otherwise
    '''
    for  letter in secretWord:
        if letter not in lettersGuessed:
            return False
    return True



def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters and underscores that represents
      what letters in secretWord have been guessed so far.
    '''
    secretWordclone = ""
    for letter in secretWord:
        if letter not in lettersGuessed:
            secretWordclone = secretWordclone + "_"
        else:
            secretWordclone = secretWordclone + letter
    return secretWordclone



def getAvailableLetters(lettersGuessed):
    '''
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters that represents what letters have not
      yet been guessed.
    '''
    new_list = ''
    a_sort = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
    for letter in a_sort:
        if letter not in lettersGuessed:
            new_list = new_list + letter
    return new_list

    

def hangman(secretWord):
    '''
    secretWord: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many 
      letters the secretWord contains.

    * Ask the user to supply one guess (i.e. letter) per round.

    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computers word.

    * After each round, you should also display to the user the 
      partially guessed word so far, as well as letters that the 
      user has not yet guessed.

    Follows the other limitations detailed in the problem write-up.
    '''
    guess_list = []
    print("Welcome to the game, Hangman!")
    print("I am thinking of a word that is", len(secretWord), "letters long.")
    guesses = 8
    guessed = False
    print("-------------")
    while guesses > 0:
        if not guessed: 
            print("You have", guesses, "guesses left.")
            print("Available letters:",getAvailableLetters(guess_list))
            user_input = input("Please guess a letter: ")
            
            if user_input in guess_list:
                print("Oops! You've already guessed that letter:", getGuessedWord(secretWord, guess_list))
            
            else:
                guess_list.append(user_input)
                if user_input in getGuessedWord(secretWord, guess_list):
                    print("Good guess:", getGuessedWord(secretWord, guess_list))
                
                else:
                    print("Oops! That letter is not in my word:", getGuessedWord(secretWord, guess_list))
                    guesses-=1

            print("-------------")

            if isWordGuessed(secretWord, guess_list) == True:
                guessed = True
                print("Congratulations, you won!")
                guesses = 0
            elif guesses == 0:
                print("Sorry, you ran out of guesses. The word was", secretWord +".")

